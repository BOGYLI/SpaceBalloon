import "math"

// Dashboard-Variablen
antennaLat = float(v: ${antenna_latitude})
antennaLon = float(v: ${antenna_longitude})
antennaAlt = float(v: ${antenna_altitude})

// Radius der Erde in Metern
R = 6371000.0

// Umrechnung von Grad in Radianten
degToRad = (d) => d * math.pi / 180.0

from(bucket: "balloon")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "MEASUREMENT") // MEASUREMENT: aprs_gps, aprs_pico, wifi_gps, spot_gps
  |> last()
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => exists r.latitude and exists r.longitude and exists r.altitude) // Filtern von ungÃ¼ltigen Werten
  |> map(fn: (r) => ({
      r with
      balloonLat: r.latitude,
      balloonLon: r.longitude,
      balloonAlt: r.altitude,
      deltaPhi: degToRad(d: r.latitude - antennaLat),
      deltaLambda: degToRad(d: r.longitude - antennaLon),
      phi1: degToRad(d: antennaLat),
      phi2: degToRad(d: r.latitude)
  }))
  |> map(fn: (r) => {
      a = math.sin(x: r.deltaPhi / 2.0) * math.sin(x: r.deltaPhi / 2.0) + 
          math.cos(x: r.phi1) * math.cos(x: r.phi2) * 
          math.sin(x: r.deltaLambda / 2.0) * math.sin(x: r.deltaLambda / 2.0)
      distance = R * 2.0 * math.atan2(y: math.sqrt(x: a), x: math.sqrt(x: 1.0 - a))
      return {
        r with
        a: a,
        distance: distance
      }
  })
  |> map(fn: (r) => ({
      r with
      azimuth: math.atan2(y: math.sin(x: r.deltaLambda) * math.cos(x: r.phi2),
                         x: math.cos(x: r.phi1) * math.sin(x: r.phi2) - math.sin(x: r.phi1) * math.cos(x: r.phi2) * math.cos(x: r.deltaLambda)) * 180.0 / math.pi,
      horizontalDistance: r.distance,
      elevation: math.atan2(y: float(v: r.balloonAlt - antennaAlt), x: r.distance) * 180.0 / math.pi
  }))
  |> map(fn: (r) => ({
      r with
      azimuth: if r.azimuth < 0.0 then r.azimuth + 360.0 else r.azimuth,
      elevation: r.elevation
  }))
  |> keep(columns: ["_time", "azimuth"])
  |> yield(name: "angles")
